cat(act_gr,"\n")
train.aux <- cbind(data.train[, act_gr, ], per1, per2)
colnames(train.aux) <- varNames
mlpTrain <- data.frame(train.aux)
mlpTrain <- mlpTrain[complete.cases(mlpTrain), ]
mlpTrain$obs <- decodeClassLabels(mlpTrain$obs)
test.aux <-
c(data.test[act_gr, ], sin(2 * pi * d / 365), cos(2 * pi * d / 365))
names(test.aux) <- varNames
mlpTest <- data.frame(t(test.aux))
mlpTest$obs <- decodeClassLabels(mlpTest$obs)
if (!anyNA(mlpTest[, -1])) {
mlpMod <-
mlp(
x = mlpTrain[, -1],
y = mlpTrain$obs,
size = c(25, 25),
maxit = 200
)
probTmp[act_gr, dimnames(mlpTrain$obs)[[2]]] <-
predict(mlpMod, mlpTest[-1])
missingProbs <- is.na(probTmp[act_gr, ])
probTmp[act_gr, missingProbs] <- 0
}
}
cat(act_gr,"\n")
train.aux <- cbind(data.train[, act_gr, ], per1, per2)
colnames(train.aux) <- varNames
mlpTrain <- data.frame(train.aux)
mlpTrain <- mlpTrain[complete.cases(mlpTrain), ]
mlpTrain$obs <- decodeClassLabels(mlpTrain$obs)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(MASS)
require(MASS)
require("MASS")
devtools::load_all()
devtools::load_all()
devtools::load_all()
require(MASS)
#' @param stationIDs A character vector of station ids.
#' @param obsNames A character vector of observation names
#' @param leadTimes A character vector of lead times
#' @param start.day Index of the first day of the verification period
#' @param end.day Index of the last day of the verification period
#' @param train Length of training period (default value is 30 days)
#' @param startZeta
#'
#' @return Estimated probabilities
#' @export
polrProbsVis <-
function(visData,
varNames,
nForcDates,
nStats,
nObsNames,
nLeadTimes,
forcDates,
stationIDs,
obsNames,
leadTimes,
start.day,
end.day,
train = 30,
startZeta = seq(-1.7,6.5,by = .1)) {
require(MASS)
probs <- array(
data = NA,
dim = c(nForcDates, nStats, nObsNames, nLeadTimes),
dimnames = list(forcDates, stationIDs, obsNames, leadTimes)
)
for (lead in leadTimes[1]){
if (as.numeric(lead)==0){
lt <- 1
} else {
lt <- ceiling(as.numeric(lead)/24)
}
start.time <- Sys.time()
for (d in (start.day):(end.day)){
train.ind <- (d - train -lt + 1):(d - lt)
data.train <- visData[train.ind,,,lead]
data.test <- visData[d,,,lead]
obs.train <- as.vector(data.train[,,1])
per1 <- rep(sin(2*pi *train.ind/365), nStats)
per2 <- rep(cos(2*pi *train.ind/365), nStats)
hres.train <- as.vector(data.train[,,2])
ctrl.train <- as.vector(data.train[,,3])
exmean.train <- as.vector(data.train[,,4])
sd.train <- as.vector(data.train[,,5])
p1.train <- as.vector(data.train[,,6])
p2.train <- as.vector(data.train[,,7])
p70.train <- as.vector(data.train[,,8])
polrTrain <- data.frame(cbind(obs.train,hres.train,ctrl.train,exmean.train,sd.train,p1.train,p2.train,p70.train, per1, per2))
dimnames(polrTrain)[[2]] <- varNames
test.aux <- cbind(data.test[,-1],rep(sin(2*pi * d/365), nStats),rep(cos(2*pi * d/365), nStats))
colnames(test.aux) <- varNames[-1]
polrTest <- data.frame(test.aux)
### Keeping coefficients of hres, ctrl and exmean nonnegative
coefCont <- TRUE
posCoef <- 3
nVals <- length(table(polrTrain$obs))
while (coefCont){
err <- try(polrMod <- polr(as.factor(obs) ~., data = polrTrain ),silent = TRUE)
if (class(err) == "try-error"){
startPars <- c(rep(1,(6+posCoef)),startZeta[1:(nVals-1)])
polrMod <- polr(as.factor(obs) ~., data = polrTrain, start = startPars )
}
if (posCoef >0){
A <- polrMod$coefficients[1:posCoef]<0
if (sum(A)>0){
posCoef <- posCoef-sum(A)
badInd <- which(A)
polrTrain <- polrTrain[,-(badInd+1)]
}else {
coefCont <- FALSE
}
} else {
coefCont <- FALSE
}
}
probTmp <- predict(polrMod, polrTest, type = 'p')
probs[(d-start.day+1),,,lead] <- 0
probs[(d-start.day+1),,dimnames(probTmp)[[2]],lead] <- probTmp
}
return(probs)
}
}
use_package('abind)
)
')
library(devtools)
?use_package
use_package(abind)
use_package('abind')
use_package('foreach')
use_package('doPrallel')
use_package('MASS')
devtools::load_all()
devtools::load_all()
library(doParallel)
install.packages(doParallel)
install.packages("doParallel")
install.packages("doParallel")
rm(list = ls())
gc()
devtools::load_all()
devtools::install_local("C:/Users/Marcsi/Documents/PP.EUPPBench.vis", force = T)
#devtools::load_all("C:/Users/Marcsi/Documents/PP.EUPPBench.vis")
#detach("package:PP.EUPPBench", unload = TRUE)
library(PP.EUPPBench)
pathResultsB <- 'D:/work/Visibility/ResultsVisBenchNew/'
pathScriptsB <- 'D:/work/Visibility/RscriptsVisBench/'
# loads visibility ensemble forecasts of the EUPPBench dataset for Germany and France: visDataObsRec
# (forecasts are already recoded according to the suggestions of the WMO)
# dimensions: [1:730, 1:42, 1:53, 1:21]
load(paste(pathResultsB, 'visData_DE_F.RData', sep = ''))
rm(visData)
gc()
obsDates <- dimnames(visDataObsRec)[[1]]
leadTimes <- dimnames(visDataObsRec)[[4]]
stationIDs <- dimnames(visDataObsRec)[[2]]
nDays <- length(obsDates)
nStats <- length(stationIDs)
nLeadTimes <- length(leadTimes)
nEns <- length(dimnames(visDataObsRec)[[3]]) - 1
rm(visDataObsRec)
gc()
#feature names
varNames <- c('obs','hres','ctrl', 'exmean', 'sd', 'p1','p2','p70','Per1','Per2')
nVars <- length(varNames)
#observation categories
obsNames <-
as.character(c(
seq(0, 5000, by = 100),
seq(6000, 30000, by = 1000),
seq(35000, 70000, by = 5000)
))
nObsNames <- length(obsNames)
load(paste(pathResultsB, 'visPolrDataV8B.RData', sep = ''))
# length of training period
train <- 30
# modeling starts with forecast initialized at 2018-01-01
start.day <- 366
end.day <- 730
forcDates <- obsDates[start.day:end.day]
nForcDates <- length(forcDates)
visData = polrData
probs <- array(
data = NA,
dim = c(nForcDates, nStats, nObsNames, nLeadTimes),
dimnames = list(forcDates, stationIDs, obsNames, leadTimes)
)
lead = leadTimes[21]
if (as.numeric(lead) == 0) {
lt <- 1
} else {
lt <- ceiling(as.numeric(lead) / 24)
}
cat("Modelling for lead time",
lead, "hours is in progress ...\n")
d = 25
train.ind <- (d - train - lt + 1):(d - lt)
lt
train
d
d = start.day
train.ind <- (d - train - lt + 1):(d - lt)
data.train <- visData[train.ind, , , lead]
per1 <- sin(2 * pi * train.ind / 365)
per2 <- cos(2 * pi * train.ind / 365)
data.test <- visData[d, , , lead]
probTmp <-
array(
data = NA,
dim = c(nStats, nObsNames),
dimnames = list(stationIDs, obsNames)
)
act_gr = 25
cat(act_gr,"\n")
train.aux <- cbind(data.train[, act_gr, ], per1, per2)
colnames(train.aux) <- varNames
mlpTrain <- data.frame(train.aux)
mlpTrain <- mlpTrain[complete.cases(mlpTrain), ]
str(mlpTrain)
mlpTrain <- mlpTrain[complete.cases(mlpTrain), ]
mlpTrain$obs <- decodeClassLabels(mlpTrain$obs)
library(RSNNS)
mlpTrain$obs <- decodeClassLabels(mlpTrain$obs)
test.aux <-
c(data.test[act_gr, ], sin(2 * pi * d / 365), cos(2 * pi * d / 365))
str(data.train)
str(polrData)
str(visData)
train.ind <- (d - train - lt + 1):(d - lt)
data.train <- visData[train.ind, , , lead]
str(data.train)
train = 350
train.aux <- cbind(data.train[, act_gr, ], per1, per2)
colnames(train.aux) <- varNames
train.ind <- (d - train - lt + 1):(d - lt)
data.train <- visData[train.ind, , , lead]
str(data.train)
per1 <- sin(2 * pi * train.ind / 365)
per2 <- cos(2 * pi * train.ind / 365)
data.test <- visData[d, , , lead]
probTmp <-
array(
data = NA,
dim = c(nStats, nObsNames),
dimnames = list(stationIDs, obsNames)
)
cat(act_gr,"\n")
train.aux <- cbind(data.train[, act_gr, ], per1, per2)
colnames(train.aux) <- varNames
mlpTrain <- data.frame(train.aux)
mlpTrain <- mlpTrain[complete.cases(mlpTrain), ]
str(mlpTrain)
abind::abind()
abind:::abind()
abind:::abind(1)
devtools::document()
devtools::document()
detach("package:PP.EUPPBench", unload = TRUE)
devtools::install_local("C:/Users/Marcsi/Documents/PP.EUPPBench.vis", force = T)
#devtools::load_all("C:/Users/Marcsi/Documents/PP.EUPPBench.vis")
#detach("package:PP.EUPPBench", unload = TRUE)
library(PP.EUPPBench)
probs <-
polrProbsVisGroup(
visData = polrData,
varNames = varNames,
nForcDates = nForcDates,
nStats = nStats,
nObsNames = nObsNames,
nLeadTimes = nLeadTimes,
forcDates = forcDates,
stationIDs = stationIDs,
obsNames = obsNames,
leadTimes = leadTimes,
start.day = start.day,
end.day = end.day,
train = 350
)
library(MASS)
probs <-
polrProbsVisGroup(
visData = polrData,
varNames = varNames,
nForcDates = nForcDates,
nStats = nStats,
nObsNames = nObsNames,
nLeadTimes = nLeadTimes,
forcDates = forcDates,
stationIDs = stationIDs,
obsNames = obsNames,
leadTimes = leadTimes,
start.day = start.day,
end.day = end.day,
train = 350
)
devtools::document()
rm(list = ls())
gc()
library(doParallel)
library(abind)
library(MASS)
devtools::install_local("C:/Users/Marcsi/Documents/PP.EUPPBench.vis", force = T)
detach("package:PP.EUPPBench", unload = TRUE)
devtools::install_local("C:/Users/Marcsi/Documents/PP.EUPPBench.vis", force = T)
#devtools::load_all("C:/Users/Marcsi/Documents/PP.EUPPBench.vis")
#detach("package:PP.EUPPBench", unload = TRUE)
library(PP.EUPPBench)
probs <-
polrProbsVisLoc(
visData = polrData,
varNames = varNames,
nForcDates = nForcDates,
nStats = nStats,
nObsNames = nObsNames,
nLeadTimes = nLeadTimes,
forcDates = forcDates,
stationIDs = stationIDs,
obsNames = obsNames,
leadTimes = leadTimes,
start.day = start.day,
end.day = end.day,
train = 350
)
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
?crps.vis.wmo
devtools::load_all()
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
install.packages("styler")
library(styler)
styler::style_pkg()
rm(list=ls())
gc()
# Parameter for the (1-alpha)% central prediction interval
alpha <- 0.1
# Parameter for probability correction
beta <- 0.01
probcorr <- 365
p.corr <- 1-(1-beta)^(1/(probcorr)) #
train <- 350
train <- 350
#pathResultsB <- '/mnt/WORK/VisibilityECMWF/ResultVisBenchNew/'
#pathScriptsB <- '/mnt/WORK/VisibilityECMWF/RscriptsVisBench/'
pathResultsB <- 'D:/work/Visibility/ResultsVisBenchNew/'
pathScriptsB <- 'D:/work/Visibility/RscriptsVisBench/'
load(paste(pathResultsB,'visData_DE_F.RData', sep = ''))
source(paste(pathScriptsB,'FunctionsVisB.R', sep = ''))
rm(visData)
gc()
meth <- 'Polr' # 'MLP' #
vers <- 'V8a' # 'V8AutoGroupN2'# 'V8AutoGroupN10'# 'V8M' #'V8a' #
load(paste(pathResultsB,'vis',meth,'Probs',vers,'B',train,'.RData', sep = ''))
load(paste(pathResultsB, "visPolrScoresV8aB50_TCCincl.Rdata"))
load(paste0(pathResultsB, "visPolrScoresV8aB50_TCCincl.Rdata"))
forcDates <- dimnames(polrProbs)[[1]]
load(paste(pathResultsB,'vis',meth,'Probs',vers,'B',train,'.RData', sep = ''))
load(paste0(pathResultsB, "visPolrScoresV8aB50_TCCincl.Rdata"))
forcDates <- dimnames(polrProbs)[[1]]
load(paste0(pathResultsB, "visPolrProbsV8aB50_TCCincl.Rdata"))
forcDates <- dimnames(polrProbs)[[1]]
stationIDs <- dimnames(polrProbs)[[2]]
leadTimes <- dimnames(polrProbs)[[4]]
nDays <- length(forcDates)
nStats <- length(stationIDs)
nLeadTimes <- length(leadTimes)
nEns <- length(dimnames(visDataObsRec)[[3]])-1
prob.names <- as.character(c(seq(0,5000, by = 100), seq(6000,30000, by = 1000), seq(35000,70000, by = 5000)))
nProb.names <- length(prob.names)
vals <- as.numeric(prob.names)
scoreNames <-  c('CRPS', 'LogS','Var','R90','PIT','SE','Is.in90')
#names of scores to be calculated
scoreNames <-  c('CRPS', 'LogS','Var','R90','PIT','SE','Is.in90')
nScores <- length(scoreNames)
visScores<- array(data = NA, dim = c(nDays,nStats,nScores,nLeadTimes),
dimnames = list(forcDates,stationIDs,scoreNames,leadTimes))
st <- 1
print(st)
d = 1
act.date <- forcDates[d]
obs <- visDataObsRec[act.date,st,'obs',]
act.stat.prob <- polrProbs[act.date,st,,]
### Correction for avoiding 0 probabilities.
act.stat.prob[act.stat.prob < p.corr] <- p.corr
act.stat.prob <- sweep(act.stat.prob, MARGIN = 2, FUN = "/", STATS = apply(act.stat.prob,2,sum))
str(act.stat.prob)
devtools::document()
?crps.vis.wmo
str(obs)
devtools::document()
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
crps.vis.wmo <- function(prob, obs) {
Z <- c(seq(0, 5000, by = 100), seq(6000, 30000, by = 1000), seq(35000, 70000, by = 5000))
crps1 <- apply(t(prob) * abs(obs - matrix(Z, nrow = length(obs), ncol = 84, byrow = T)), 1, sum)
Zmat <- matrix(Z, nrow = 84, ncol = 84, byrow = T)
crps2 <- apply((abs(Zmat - t(Zmat)) %*% prob) * prob, 2, sum)
crps <- crps1 - crps2 / 2
return(crps)
}
devtools::document()
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
?obs
str(obs)
class(obs)
devtools::document()
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
devtools::document()
?crps.vis.wmo
?logs.vis.wmo
visScores[d,st,1,] <- crps.vis.wmo(act.stat.prob,obs)
visScores[d,st,2,] <- logs.vis.wmo(act.stat.prob,obs)
visScores[d,st,3,] <- var.vis.wmo(act.stat.prob)
devtools::document()
?var.vis.wmo
devtools::document()
?var.vis.wmo
prob = act.stat.prob
Z <-
c(seq(0, 5000, by = 100),
seq(6000, 30000, by = 1000),
seq(35000, 70000, by = 5000))
sum.prob <- apply(prob, 2, cumsum)
ind.q <- apply(sum.prob < q, 2, sum) + 1
q = 0.25
ind.q <- apply(sum.prob < q, 2, sum) + 1
Z[ind.q]
Z <-
c(seq(0, 5000, by = 100),
seq(6000, 30000, by = 1000),
seq(35000, 70000, by = 5000))
MEAN <- Z %*% prob
sqMEAN <- Z ^ 2 %*% prob
VAR <- sqMEAN - MEAN ^ 2
Z[ind.q]
devtools::document()
?var.vis.wmo
?quant.vis.wmo
visScores[d,st,5,] <- pit.vis.wmo(act.stat.prob,obs)
pit.vis.wmo <- function(prob, obs) {
N <- length(obs)
good.ind <- !is.na(obs)
obsind <- as.character(obs[good.ind])
prob <- prob[, good.ind]
Ngood <- sum(good.ind)
if (Ngood == 1) {
M <- length(prob)
auxInd <- c(1:M)
names(auxInd) <- names(prob)
auxInd <- auxInd[obsind]
prob <- c(0, prob)
sum.prob <- cumsum(prob)
boundL <- sum.prob[auxInd]
boundU <- sum.prob[auxInd + 1]
} else if (Ngood > 1) {
M <- dim(prob)[1]
auxInd <- c(1:M)
names(auxInd) <- dimnames(prob)[[1]]
auxInd <- auxInd[obsind]
prob <- rbind(rep(0, Ngood), prob)
sum.prob <- apply(prob, 2, cumsum)
boundL <- diag(sum.prob[auxInd,])
boundU <- diag(sum.prob[auxInd + 1,])
}
PIT <- rep(NA, N)
if (Ngood > 0) {
PIT[good.ind] <- runif(rep(1, Ngood), min = boundL, max = boundU)
}
return(PIT)
}
str(PIT)
N <- length(obs)
pit.vis.wmo(act.stat.prob,obs)
getwd()
getwd
getwd()
library(devtools)
devtools::load_all()
devtools::load_all()
devtools::load_all()
